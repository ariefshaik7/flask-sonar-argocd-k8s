pipeline {
  agent any

  environment {
    SONAR_URL = "http://134.33.64.163:9000"
    IMAGE_NAME = "ariefshaik007/ci-cd-flask-app"
    IMAGE_TAG = "${BUILD_NUMBER}"
    GIT_REPO_NAME = "flask-sonar-argocd-k8s"
    GIT_USER_NAME = "ariefshaik7"
  }

  stages {
    stage('Setup & Install Dependencies') {
      steps {
        sh '''
          sudo apt update
          sudo apt install -y python3.11 python3.11-venv python3.11-dev python3-pip unzip openjdk-11-jre wget
          python3.11 -m venv venv
          source venv/bin/activate
          cd flask-app
          pip install --upgrade pip
          pip install -r requirements.txt
        '''
      }
    }

    stage('Run Tests') {
      steps {
        sh '''
          source venv/bin/activate
          cd flask-app
          pytest test_app.py
        '''
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            # Install SonarScanner
            wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
            unzip sonar-scanner.zip
            sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
            sudo ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner

            # Run Sonar
            cd flask-app
            sonar-scanner \
              -Dsonar.projectKey=flask-sonar-argocd-k8s \
              -Dsonar.login=$SONAR_AUTH_TOKEN \
              -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_CRED = credentials('dockerhub')
      }
      steps {
        sh '''
          cd flask-app
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          echo $DOCKER_CRED_PSW | docker login -u $DOCKER_CRED_USR --password-stdin
          docker push $IMAGE_NAME:$IMAGE_TAG
        '''
      }
    }

    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            rm -rf $GIT_REPO_NAME
            git clone https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git
            cd ${GIT_REPO_NAME}
            git config user.email "ariefshaik001@gmail.com"
            git config user.name "arief"
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" flask-app-manifests/deployment.yml
            sed -i "s|ariefshaik007/ci-cd-flask-app:.*|ariefshaik007/ci-cd-flask-app:${BUILD_NUMBER}|g" flask-app-manifests/deployment.yml
            git add flask-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
          '''
        }
      }
    }
  }

  post {
    success {
      echo ' CI/CD pipeline completed successfully!'
    }
    failure {
      echo ' CI/CD pipeline failed!'
    }
  }
}
